"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const Text_1 = require("../Text");
const OptionStripContainer = styled_components_1.default.div `
  box-sizing: border-box;
  border-radius: 2px;
  display: inline-flex;
  height: 24px;
  justify-content: center;

  &:hover {
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);
  }
`;
const OptionStripOption = styled_components_1.default.div `
  align-items: center;
  background: ${(props) => (props.selected ? 'rgba(0,0,0,0.1)' : 'transparent')};
  box-sizing: border-box;
  border-radius: 2px;
  display: inline-flex;
  flex-grow: 1;
  height: 24px;
  justify-content: center;
  min-width: 24px;
  padding: 5px;
  position: relative;

  ${Text_1.Text} {
    line-height: 0;
  }

  input {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0;
  }
`;
class OptionStripFactory extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            defaultSelected: this.props.defaultValue || this.props.options[0].value,
            options: this.props.options,
            value: this.props.value ? this.props.value : this.props.defaultValue ? this.props.defaultValue : this.props.options[0].value
        };
        this.handleChange = this.handleChange.bind(this);
    }
    render() {
        return (React.createElement(OptionStripContainer, Object.assign({}, this.props), this.props.options.map((option, i) => {
            return (React.createElement(OptionStripOption, { key: `options-strip-item-` + option.value, selected: option.value === this.state.value },
                React.createElement("input", { type: 'radio', name: `options-strip-${this.props.options[0].label}`, onChange: this.handleChange, value: option.value, checked: option.value === this.state.value ? true : false }),
                React.createElement(Text_1.Text, { size: 'small' }, option.label ? option.label : option.value)));
        })));
    }
    componentDidUpdate(prevState) {
        if (this.props.value && prevState.value !== this.props.value) {
            this.setState({ value: this.props.value });
        }
    }
    updateState(value, event) {
        this.setState({
            value: value
        }, () => {
            if (this.props.onChange) {
                this.props.onChange(event);
            }
        });
    }
    handleChange(event) {
        event.persist();
        const value = event.target.value;
        const storedEvent = event;
        this.updateState(value, storedEvent);
    }
}
exports.OptionStrip = styled_components_1.default(OptionStripFactory) ``;
